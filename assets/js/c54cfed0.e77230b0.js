"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[844],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),u=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),m=u(n),h=a,p=m["".concat(l,".").concat(h)]||m[h]||c[h]||o;return n?i.createElement(p,s(s({ref:t},d),{},{components:n})):i.createElement(p,s({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:a,s[1]=r;for(var u=2;u<o;u++)s[u]=n[u];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8807:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return d},default:function(){return m}});var i=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],r={sidebar_position:4},l="JUnit Testing Style Guide",u={unversionedId:"junit-framework/introduction/style-guide",id:"junit-framework/introduction/style-guide",title:"JUnit Testing Style Guide",description:"This style guide outlines the general expectations and chosen stylistic choices for all tests written for the Canvas",source:"@site/docs/junit-framework/introduction/style-guide.md",sourceDirName:"junit-framework/introduction",slug:"/junit-framework/introduction/style-guide",permalink:"/docs/docs/junit-framework/introduction/style-guide",editUrl:"https://github.com/canvas-gamification/docs/docs/junit-framework/introduction/style-guide.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Questions with `Random` Printed Output",permalink:"/docs/docs/junit-framework/introduction/implementing-tests/random-questions"},next:{title:"Test Classes",permalink:"/docs/docs/junit-framework/writing-tests"}},d=[{value:"General Conventions",id:"general-conventions",children:[],level:2},{value:"Naming Conventions",id:"naming-conventions",children:[],level:2},{value:"MainTest File",id:"maintest-file",children:[{value:"MainTest Example",id:"maintest-example",children:[],level:3}],level:2},{value:"Question File",id:"question-file",children:[{value:"Question File Example",id:"question-file-example",children:[],level:3}],level:2}],c={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"junit-testing-style-guide"},"JUnit Testing Style Guide"),(0,o.kt)("p",null,"This style guide outlines the general expectations and chosen stylistic choices for all tests written for the Canvas\nGamification project."),(0,o.kt)("h2",{id:"general-conventions"},"General Conventions"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"All questions should be on their own branch. This prevents a single question holding up several others from being\nmerged due to a bug or other issues."),(0,o.kt)("li",{parentName:"ul"},"All questions should have their own folder based on the question number on the category question document. Each\nquestion should have two files: one for the question text and solution code, and one for the JUnit test."),(0,o.kt)("li",{parentName:"ul"},"All question text must be proofread and should be grammatically correct. If the question text is changed, the question\ndocument text must also be updated.")),(0,o.kt)("h2",{id:"naming-conventions"},"Naming Conventions"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Branches must be named in the format ",(0,o.kt)("inlineCode",{parentName:"li"},"<category>-<sub_category>-<difficulty>-<question_number>")," and if the category or\nsubcategory has multiple words, it must be in snake case\n(",(0,o.kt)("inlineCode",{parentName:"li"},"arrays-programs_involving_data_sequences-hard-q3"),")."),(0,o.kt)("li",{parentName:"ul"},"All variables and methods must be named in camelCase, and both must be specific and relevant names. For example, some\ngood names are ",(0,o.kt)("inlineCode",{parentName:"li"},"int sumOfArrayValues")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"String greetingMessage"),"."),(0,o.kt)("li",{parentName:"ul"},"The JUnit test file must be named ",(0,o.kt)("inlineCode",{parentName:"li"},"MainTest")," to work and the Canvas Gamefication website and the question file must\nmatch the given class name on the question document, and be in BigCamelCase (",(0,o.kt)("inlineCode",{parentName:"li"},"ClassName"),")."),(0,o.kt)("li",{parentName:"ul"},"Names for test methods must be related to what they are testing and should make grammatical sense, as they are part of\nthe output that students will see. For example, if the test is for a method the student wrote called sum, a good name\nwould be\n",(0,o.kt)("inlineCode",{parentName:"li"},"correctSumMethod"),".")),(0,o.kt)("h2",{id:"maintest-file"},"MainTest File"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This file contains the JUnit test and must be called ",(0,o.kt)("inlineCode",{parentName:"li"},"MainTest"),". In order to use the framework, the class should\nextend ",(0,o.kt)("inlineCode",{parentName:"li"},"BaseTest"),", unless the question involves randomness, which it should then extend ",(0,o.kt)("inlineCode",{parentName:"li"},"BaseRandomTest"),"."),(0,o.kt)("li",{parentName:"ul"},"All JUnit test files should have a tag indicating what type of question it is testing. This will be ",(0,o.kt)("inlineCode",{parentName:"li"},"// Parons"),",\n",(0,o.kt)("inlineCode",{parentName:"li"},"// Parsons with distractors"),", or ",(0,o.kt)("inlineCode",{parentName:"li"},"// Java")," and should be located on the line immediately after the class declaration."),(0,o.kt)("li",{parentName:"ul"},"Using the framework requires two methods to be declared; ",(0,o.kt)("inlineCode",{parentName:"li"},"testSentence()")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"runMain()"),". The test sentence method\nuses clauses to structure the output which the student should be printing, which is matched using regular expressions.\nAs such, any special regex characters (?, /, !, ^, etc.) must be escaped (",(0,o.kt)("inlineCode",{parentName:"li"},'"How are you\\\\?"'),"). The other method which\nmust be defined is ",(0,o.kt)("inlineCode",{parentName:"li"},"runMain()"),", which must call the main method of the class you are testing."),(0,o.kt)("li",{parentName:"ul"},"Any tests written in this file should ",(0,o.kt)("strong",{parentName:"li"},"never")," be reliant on any methods written by the student in question file.\nGenerally, any input/output tests should be hardcoded, and if a method is required to compute a value for a test, it\nshould be coded by the test writer and not copied from the solution code. This helps catch any issues or discrepancies\nin the question. If a student method needs to be called, use the functions in ",(0,o.kt)("inlineCode",{parentName:"li"},"MethodUtil"),"."),(0,o.kt)("li",{parentName:"ul"},"The tests written for the question must have good coverage, and should fail all incorrect code. However, the tests\nshould also not be excessive, as the more test cases, the more points awarded to the student."),(0,o.kt)("li",{parentName:"ul"},"All tests must have error/fail messages and be complete, grammatically correct sentences with proper punctuation. The\nmessage should be relevant to the question but not completely give away the answer to the student.")),(0,o.kt)("h3",{id:"maintest-example"},"MainTest Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'class MainTest extends BaseTest {\n    // Question type\n    public Clause[] testSentence() {\n        return new Clause[]{\n                // Clauses for question\n                new IntegerLiteral("sum")\n        };\n    }\n\n    public void runMain() {\n        ClassName.main(new String[0]);\n    }\n\n    @Test\n    void sampleSumTest() {\n        assertEquals(Integer.parseInt(getItemByName("sum")), 5,\n                "Your program does not correctly computer the sum of two numbers.");\n    }\n}\n')),(0,o.kt)("h2",{id:"question-file"},"Question File"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This file contains the solution code and question information"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"// Parsons with distractors")," questions must have the distractors in the question file"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"// Java")," questions ",(0,o.kt)("strong",{parentName:"li"},"must")," have a sample output so the student knows how we expect them to format their output. For\nthe other types of questions, a sample output is helpful, but not required."),(0,o.kt)("li",{parentName:"ul"},"The format is the question text in a comment block, followed by the sample output and distractors if needed for the\nquestion. This is followed by the solution code to the question.")),(0,o.kt)("h3",{id:"question-file-example"},"Question File Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"/*\n        This is where the question text goes.\n        \n        Sample Output: \n            Hello world!\n            \n        Distractors:\n            int a = 7;     \n */\n\npublic class SampleQuestion {\n    public static void main(String[] args) {\n        // Solution code\n    }\n}\n")))}m.isMDXComponent=!0}}]);