"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8581],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return c}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),p=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(a),c=r,k=m["".concat(u,".").concat(c)]||m[c]||s[c]||l;return a?n.createElement(k,i(i({ref:t},d),{},{components:a})):n.createElement(k,i({ref:t},d))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9984:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return d},default:function(){return m}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=["components"],o={sidebar_position:2},u="Clause Documentation",p={unversionedId:"junit-framework/clauses/clause-documentation",id:"junit-framework/clauses/clause-documentation",title:"Clause Documentation",description:"Literal Clauses",source:"@site/docs/junit-framework/clauses/clause-documentation.md",sourceDirName:"junit-framework/clauses",slug:"/junit-framework/clauses/clause-documentation",permalink:"/docs/docs/junit-framework/clauses/clause-documentation",editUrl:"https://github.com/canvas-gamification/docs/docs/junit-framework/clauses/clause-documentation.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Intro to Clauses",permalink:"/docs/docs/junit-framework/clauses/"},next:{title:"Retrieving Values",permalink:"/docs/docs/junit-framework/clauses/retrieving-values"}},d=[{value:"Literal Clauses",id:"literal-clauses",children:[{value:"<code>IntegerLiteral</code>",id:"integerliteral",children:[],level:3},{value:"<code>DoubleLiteral</code>",id:"doubleliteral",children:[],level:3},{value:"<code>StringLiteral</code>",id:"stringliteral",children:[],level:3}],level:2},{value:"Random Clauses",id:"random-clauses",children:[{value:"<code>RandomInteger</code>",id:"randominteger",children:[],level:3},{value:"<code>RandomChar</code>",id:"randomchar",children:[],level:3},{value:"<code>RandomDouble</code>",id:"randomdouble",children:[],level:3}],level:2},{value:"Utility Clauses",id:"utility-clauses",children:[{value:"<code>NewLine</code>",id:"newline",children:[],level:3},{value:"<code>PlaceHolder</code>",id:"placeholder",children:[],level:3}],level:2}],s={toc:d};function m(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"clause-documentation"},"Clause Documentation"),(0,l.kt)("h2",{id:"literal-clauses"},"Literal Clauses"),(0,l.kt)("h3",{id:"integerliteral"},(0,l.kt)("inlineCode",{parentName:"h3"},"IntegerLiteral")),(0,l.kt)("p",null,"This clause is intended to be used when there is an integer that is part of the program's output that you want to separate from the rest of the sentence."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Constructor:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public IntegerLiteral(int value, [String name]) {\n    ...\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"value")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")),(0,l.kt)("td",{parentName:"tr",align:null},"The integer that needs to be matched in the final sentence")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"name")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"Name that can be used to retrieve the value during testing")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public Clause[] testSentence() {\n    return new Clause[]{\n        new IntegerLiteral(42),\n        new IntegerLiteral(365, "second number")  // with name\n    };\n}\n')),(0,l.kt)("h3",{id:"doubleliteral"},(0,l.kt)("inlineCode",{parentName:"h3"},"DoubleLiteral")),(0,l.kt)("p",null,"This clause is intended to be used when there is a double/float that is part of the program's output that you want to separate from the rest of the sentence."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Constructor:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public DoubleLiteral(double lower, double upper, [String name]) {\n    ...\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"lower")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"double")),(0,l.kt)("td",{parentName:"tr",align:null},"The lower bound (inclusive) of values that this double value can equal")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"upper")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"double")),(0,l.kt)("td",{parentName:"tr",align:null},"The lower bound (exclusive) of values that this double value can equal")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"name")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"Name that can be used to retrieve the value during testing")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public Clause[] testSentence() {\n    return new Clause[]{\n        new DoubleLiteral("first double"), // matches any double\n        new DoubleLiteral(1, 10, "second double")  // matches within range [1, 10)\n    };\n}\n')),(0,l.kt)("h3",{id:"stringliteral"},(0,l.kt)("inlineCode",{parentName:"h3"},"StringLiteral")),(0,l.kt)("p",null,"This clause is intended to be used when there is a constant section of text that is part of the program's output that you want to separate from the rest of the sentence."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Constructor:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public StringLiteral(String text, [String name]) {\n    ...\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"text")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"The case-sensitive regex text that needs to be matched in the final sentence")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"name")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"Name that can be used to retrieve the value during testing")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public Clause[] testSentence() {\n    return new Clause[]{\n        new StringLiteral("This is a simple test."),\n        new StringLiteral("This is a simple test.", "exampleText")  // with name\n    };\n}\n')),(0,l.kt)("h2",{id:"random-clauses"},"Random Clauses"),(0,l.kt)("h3",{id:"randominteger"},(0,l.kt)("inlineCode",{parentName:"h3"},"RandomInteger")),(0,l.kt)("p",null,"This clause is used in instances where an integer's value is determined randomly. Used with ",(0,l.kt)("inlineCode",{parentName:"p"},"BaseRandomTest"),", the\nrandomness of this value and its range will be automatically tested."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Constructor:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public RandomInteger(int lower, int upper, [String name]) {\n    ...\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"lower")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")),(0,l.kt)("td",{parentName:"tr",align:null},"The lower bound (inclusive) of values that this random integer can equal")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"upper")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")),(0,l.kt)("td",{parentName:"tr",align:null},"The lower bound (exclusive) of values that this random integer can equal")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"name")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"Name that can be used to retrieve the value during testing")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public Clause[] testSentence() {\n    return new Clause[]{\n        new RandomInteger(1, 5),  // a random integer that could equal 1, 2, 3, or 4\n        new RandomInteger(25, 75, "random integer")  // another example using the name parameter\n    };\n}\n')),(0,l.kt)("h3",{id:"randomchar"},(0,l.kt)("inlineCode",{parentName:"h3"},"RandomChar")),(0,l.kt)("p",null,"This clause is used in instances where a character's value is determined randomly. Used with ",(0,l.kt)("inlineCode",{parentName:"p"},"BaseRandomTest"),", the\nrandomness of this value and its range will be automatically tested."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Constructor:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public RandomChar(char lower, char upper, [String name]) {\n    ...\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"lower")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"char")),(0,l.kt)("td",{parentName:"tr",align:null},"The lower bound (inclusive) of values that this random character can equal")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"upper")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"char")),(0,l.kt)("td",{parentName:"tr",align:null},"The lower bound (exclusive) of values that this random character can equal")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"name")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"Name that can be used to retrieve the value during testing")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public Clause[] testSentence() {\n    return new Clause[]{\n        new RandomChar('a', 'z'),  // a random character that could equal anything between 'a'(inclusive) and 'z'(exclusive)\n        new RandomChar('A', 'Z', \"random char\")  // another example using the name parameter\n    };\n}\n")),(0,l.kt)("h3",{id:"randomdouble"},(0,l.kt)("inlineCode",{parentName:"h3"},"RandomDouble")),(0,l.kt)("p",null,"This clause is used in instances where a double/float's value is determined randomly. Used with ",(0,l.kt)("inlineCode",{parentName:"p"},"BaseRandomTest"),", the\nrandomness of this value and its range will be automatically tested."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Constructor:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public RandomDouble(double lower, double upper, [int precision], [String name]) {\n    ...\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"lower")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"double")),(0,l.kt)("td",{parentName:"tr",align:null},"The lower bound (inclusive) of values that this random double can equal")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"upper")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"double")),(0,l.kt)("td",{parentName:"tr",align:null},"The lower bound (exclusive) of values that this random double can equal")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"precision")," (optional) ","[WORK-IN-PROGRESS]"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")),(0,l.kt)("td",{parentName:"tr",align:null},"The number of decimal places that this random double should have")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"name")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"Name that can be used to retrieve the value during testing")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public Clause[] testSentence() {\n    return new Clause[]{\n        new RandomDouble(11.9, 23.6),  // a random double that could equal anything between 11.9(inclusive) and 23.6(exclusive)\n        new RandomDouble(25, 899.9, "random double")  // another example using the name parameter\n    };\n}\n')),(0,l.kt)("h2",{id:"utility-clauses"},"Utility Clauses"),(0,l.kt)("h3",{id:"newline"},(0,l.kt)("inlineCode",{parentName:"h3"},"NewLine")),(0,l.kt)("p",null,"This clause simply allows you to specify new lines in the tested program's expected output."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Constructor:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public NewLine([String name]) {\n    ...\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"name")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"Name that can be used to retrieve the value during testing")))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"While the optional ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," parameter is supported, it is largely irrelevant for this utility class.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public Clause[] testSentence() {\n    return new Clause[]{\n        new StringLiteral("Foo"),\n        new NewLine(),\n        new StringLiteral("Bar"),\n    };\n}\n')),(0,l.kt)("h3",{id:"placeholder"},(0,l.kt)("inlineCode",{parentName:"h3"},"PlaceHolder")),(0,l.kt)("p",null,'A special clause that can have clause(s) "injected" in it\'s place. ',(0,l.kt)("inlineCode",{parentName:"p"},"PlaceHolder")," is the primary way to use injections in the tested program."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Constructor:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public PlaceHolder() {\n    ...\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage:")),(0,l.kt)("p",null,"For a detailed description of how to use this clause, see the ",(0,l.kt)("a",{parentName:"p",href:"/docs/docs/junit-framework/input-tests/clause-injection"},"injection guide"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public Clause[] testSentence() {\n    return new Clause[]{\n        new StringLiteral("Foo"),\n        new PlaceHolder(),  //an example of where the placeholder would go\n        new StringLiteral("Bar"),\n    };\n}\n')))}m.isMDXComponent=!0}}]);