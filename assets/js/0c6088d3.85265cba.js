"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4999],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),l=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(u.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=l(t),d=i,g=c["".concat(u,".").concat(d)]||c[d]||m[d]||a;return t?r.createElement(g,s(s({ref:n},p),{},{components:t})):r.createElement(g,s({ref:n},p))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,s=new Array(a);s[0]=c;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var l=2;l<a;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},4813:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return p},default:function(){return c}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),s=["components"],o={sidebar_position:6},u="Full Examples",l={unversionedId:"junit-framework/input-tests/full-example",id:"junit-framework/input-tests/full-example",title:"Full Examples",description:"Sample Input Test",source:"@site/docs/junit-framework/input-tests/full-example.md",sourceDirName:"junit-framework/input-tests",slug:"/junit-framework/input-tests/full-example",permalink:"/docs/docs/junit-framework/input-tests/full-example",editUrl:"https://github.com/canvas-gamification/docs/docs/junit-framework/input-tests/full-example.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Clause Injection",permalink:"/docs/docs/junit-framework/input-tests/clause-injection"},next:{title:"ArrayUtil",permalink:"/docs/docs/junit-framework/utility/array-util"}},p=[{value:"Sample Input Test",id:"sample-input-test",children:[{value:"Question Class",id:"question-class",children:[],level:3},{value:"Test Class",id:"test-class",children:[],level:3}],level:2},{value:"Sample Test with Clause Injection",id:"sample-test-with-clause-injection",children:[{value:"Question Class",id:"question-class-1",children:[],level:3},{value:"Test Class",id:"test-class-1",children:[],level:3}],level:2}],m={toc:p};function c(e){var n=e.components,t=(0,i.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"full-examples"},"Full Examples"),(0,a.kt)("h2",{id:"sample-input-test"},"Sample Input Test"),(0,a.kt)("h3",{id:"question-class"},"Question Class"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.Scanner;\n\n/*\nWrite a program that will ask the user for two numbers and print the sum of the two numbers\n Sample Output:\n This is a program to add two numbers.\n Enter a number: \n 5\n Enter another number: \n 3\n The sum is 8\n*/\n\npublic class Example {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        System.out.println("This is a program to add two numbers.");\n        System.out.println("Enter a number: ");\n        int num1 = input.nextInt();\n        System.out.println("Enter another number: ");\n        int num2 = input.nextInt();\n        int sum = num1 + num2;\n        System.out.println("The sum is " + sum);\n    }\n}\n')),(0,a.kt)("h3",{id:"test-class"},"Test Class"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import global.BaseTest;\nimport global.tools.TestOption;\nimport global.variables.Clause;\nimport global.variables.clauses.*;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport java.util.stream.Stream;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ExampleTest extends BaseTest {\n    public Clause[] testSentence() {\n        TestOption.isInputTest = true;\n        TestOption.defaultInput = "1 1 ";\n\n        return new Clause[]{\n                new StringLiteral("This is a program to add two numbers."),\n                new NewLine(),\n                new StringLiteral("Enter a number: "),\n                new NewLine(),\n                new StringLiteral("Enter another number: "),\n                new NewLine(),\n                new StringLiteral("The sum is "),\n                new IntegerLiteral("sum")\n        };\n    }\n\n    public void runMain() {\n        Example.main(new String[0]);\n    }\n\n    // Set up custom inputs\n    static Stream<Arguments> inputProvider() {\n        return Stream.of(Arguments.of("5", "3"), Arguments.of("-1", "40"));\n    }\n\n    @ParameterizedTest\n    @MethodSource("inputProvider")\n    void testWithInput(String num1, String num2) throws InvalidClauseException {\n        // run the class with input\n        runWithInput( num1 + System.lineSeparator() + num2 );\n\n        int sum = Integer.parseInt(num1) + Integer.parseInt(num2);\n\n        assertEquals(getItemByName("sum"), String.valueOf(sum));\n    }\n}\n')),(0,a.kt)("h2",{id:"sample-test-with-clause-injection"},"Sample Test with Clause Injection"),(0,a.kt)("h3",{id:"question-class-1"},"Question Class"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.Scanner;\n\n/*\nWrite a program that will ask the user for a number and print whether it is a prime number or not.\n    Sample Output:\n    Enter a number: \n    6\n    The number 6 is not a prime number.\n*/\n\npublic class IsPrime {\n    public static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.println("Enter a number:");\n        int n = sc.nextInt();\n        if (isPrime(n)) {\n            System.out.println("The number " + n + " is a prime number.");\n        } else {\n            System.out.println("The number " + n + " is not a prime number.");\n        }\n    }\n}\n\n')),(0,a.kt)("h3",{id:"test-class-1"},"Test Class"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import global.BaseTest;\nimport global.exceptions.InvalidClauseException;\nimport global.tools.TestOption;\nimport global.variables.Clause;\nimport global.variables.clauses.*;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport java.util.stream.Stream;\n\npublic class IsPrimeTest extends BaseTest {\n    public Clause[] testSentence() {\n        TestOption.isInputTest = true;\n        TestOption.defaultInput = "1";\n\n        return new Clause[]{\n                new StringLiteral("Enter a number:"),\n                new NewLine(),\n                new StringLiteral("The number "),\n                new PlaceHolder(), // For the number\n                new StringLiteral(" is "),\n                new PlaceHolder(), // For the prime status\n        };\n    }\n\n    public void runMain() {\n        IsPrime.main(new String[0]);\n    }\n\n    static Stream<Integer> inputProviderPrime() {\n        return Stream.of(2, 3, 5, 7, 11, 13, 17, 19);\n    }\n\n    static Stream<Integer> inputProviderComposite() {\n        return Stream.of(4, 6, 8, 9, 10, 12, 14, 15);\n    }\n\n    @ParameterizedTest\n    @MethodSource("inputProviderPrime")\n    void worksWithPrimeNumbers(int input) throws InvalidClauseException {\n        String message = "a prime number.";\n        TestOption.incorrectStructureErrorMessage = "Your program did not correctly identify a prime number.";\n        runWithInput(String.valueOf(input), new Clause[]{\n                new IntegerLiteral(input, "injected"),\n                new StringLiteral(message)\n        });\n    }\n\n    @ParameterizedTest\n    @MethodSource("inputProviderComposite")\n    void worksWithCompositeNumbers(int input) throws InvalidClauseException {\n        String message = "not a prime number.";\n        TestOption.incorrectStructureErrorMessage = "Your program did not correctly identify a non-prime number.";\n        runWithInput(String.valueOf(input), new Clause[]{\n                new IntegerLiteral(input, "injected"),\n                new StringLiteral(message)\n        });\n    }\n}\n')),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Changing the default error message")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"In the test above, we use the ",(0,a.kt)("inlineCode",{parentName:"p"},"incorrectStructureErrorMessage")," property of ",(0,a.kt)("inlineCode",{parentName:"p"},"TestOption"),' to change the error message displayed to the user based on the case. By default, the error message is: "Your code\'s output did not follow the correct structure/syntax.", which might not be helpful for the user, so we can change it to something more helpful based on the question.'))))}c.isMDXComponent=!0}}]);