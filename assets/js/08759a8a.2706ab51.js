"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[236],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return c}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),c=r,h=d["".concat(p,".").concat(c)]||d[c]||m[c]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9996:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:3},p="Parameterized Testing",l={unversionedId:"junit-framework/input-tests/parameterized-testing",id:"junit-framework/input-tests/parameterized-testing",title:"Parameterized Testing",description:"Parameterized Tests are a feature of JUnit5 that allow us to run tests with variable input. To achieve this there are three main components (other than the usual implemented methods from BaseTest like runMain()) a test class needs to run tests with input:",source:"@site/docs/junit-framework/input-tests/parameterized-testing.md",sourceDirName:"junit-framework/input-tests",slug:"/junit-framework/input-tests/parameterized-testing",permalink:"/docs/docs/junit-framework/input-tests/parameterized-testing",editUrl:"https://github.com/canvas-gamification/docs/docs/junit-framework/input-tests/parameterized-testing.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Test Options",permalink:"/docs/docs/junit-framework/input-tests/test-option"},next:{title:"Clause Injection",permalink:"/docs/docs/junit-framework/input-tests/clause-injection"}},u=[{value:"<code>inputProvider()</code>",id:"inputprovider",children:[],level:2},{value:"A Parameterized Test",id:"a-parameterized-test",children:[],level:2},{value:"<code>runWithInput()</code>",id:"runwithinput",children:[],level:2},{value:"Parameterized Tests with Multiple Inputs",id:"parameterized-tests-with-multiple-inputs",children:[],level:2}],m={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"parameterized-testing"},"Parameterized Testing"),(0,i.kt)("p",null,"Parameterized Tests are a feature of JUnit5 that allow us to run tests with variable input. To achieve this there are three main components (other than the usual implemented methods from ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseTest")," like ",(0,i.kt)("inlineCode",{parentName:"p"},"runMain()"),") a test class needs to run tests with input:"),(0,i.kt)("h2",{id:"inputprovider"},(0,i.kt)("inlineCode",{parentName:"h2"},"inputProvider()")),(0,i.kt)("p",null,"To run a test with multiple inputs, a set of inputs needs to be defined that the tests can run with. This takes the form of a ",(0,i.kt)("inlineCode",{parentName:"p"},"Stream")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," values that represent the various cases to run the test with exactly as they should be entered into the question."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You also need to make sure you add an import for ",(0,i.kt)("inlineCode",{parentName:"p"},"Stream")," in your test class like so:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.stream.Stream;\n")))),(0,i.kt)("p",null,"An example of how this could be used is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'public class InputExample extends BaseTest {\n    //...other implemented methods\n    static Stream<String> inputProvider() {\n        return Stream.of(new String[]{"a", "b"});\n    }\n}\n')),(0,i.kt)("p",null,"The parameter passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"Stream.of()")," can either be a String array, or simply the elements of the array separated by a comma, so an equivalent call to ",(0,i.kt)("inlineCode",{parentName:"p"},"Stream.of()")," would be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'static Stream<String> inputProvider() {\n        return Stream.of("a", "b");\n    }\n')),(0,i.kt)("p",null,"The stream of inputs should ",(0,i.kt)("strong",{parentName:"p"},"always")," be Strings, and for multiple inputs, the inputs should be joined with ",(0,i.kt)("inlineCode",{parentName:"p"},"System.lineSeparator().")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Modularize")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"To have cleaner code, you could make a method in your test class that might generate the required formatted strings as an array and put the generated array into the ",(0,i.kt)("inlineCode",{parentName:"p"},"Stream.of()")," method."))),(0,i.kt)("h2",{id:"a-parameterized-test"},"A Parameterized Test"),(0,i.kt)("p",null,"Now that you have an input provider, you can create tests that use these inputs using JUnit5's ",(0,i.kt)("inlineCode",{parentName:"p"},"ParameterizedTest")," decorator and a ",(0,i.kt)("inlineCode",{parentName:"p"},"MethodSource"),". Assuming you have a method called ",(0,i.kt)("inlineCode",{parentName:"p"},"inputProvider()")," that returns an object of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Stream<String>"),", a parameterized test would look like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    @ParameterizedTest\n    @MethodSource("inputProvider")\n    void testWithInput(String input) throws InvalidClauseException {\n        //...call main and then assert statements\n    }\n')),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),(0,i.kt)("inlineCode",{parentName:"h5"},"InvalidClauseException"))),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Make sure your method throws ",(0,i.kt)("inlineCode",{parentName:"p"},"InvalidClauseException")," since this is an error that will bubble up through your method!"))),(0,i.kt)("p",null,"The way the ",(0,i.kt)("inlineCode",{parentName:"p"},"MethodSource")," decorator works is that it runs ",(0,i.kt)("inlineCode",{parentName:"p"},"testWithInput")," multiple times and passes each element of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Stream")," into ",(0,i.kt)("inlineCode",{parentName:"p"},"testWithInput")," as the parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"input"),", which can be used to access the input value that is currently being tested."),(0,i.kt)("h2",{id:"runwithinput"},(0,i.kt)("inlineCode",{parentName:"h2"},"runWithInput()")),(0,i.kt)("p",null,"This is the final piece of the puzzle and is needed to actually execute the program class with the various inputs. It will also run the default framework tests that check for the output's format as well."),(0,i.kt)("p",null,"To run a simple program with input that doesn't have output that includes the input (for the case where the input is included in the output look at ",(0,i.kt)("a",{parentName:"p",href:"./clause-injection"},"Clause Injections"),"), add the following code to your parameterized tests:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    @ParameterizedTest\n    @MethodSource("inputProvider")\n    void testWithInput(String input) throws InvalidClauseException {\n        runWithInput(input); //This will run main with input and set the output\n        //...assert statements (like any other test)\n    }\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Freestyle")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"We use the method called ",(0,i.kt)("inlineCode",{parentName:"p"},"inputProvider()")," to generate the inputs for the tests, but you can also use any other method that returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"Stream<String>")," to run the tests. This is particularly useful when you want to run tests with different cases of inputs."))),(0,i.kt)("h2",{id:"parameterized-tests-with-multiple-inputs"},"Parameterized Tests with Multiple Inputs"),(0,i.kt)("p",null,"For the case where you want to run tests with multiple inputs, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Arguments.of()")," method to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"Stream<Arguments>")," that will be passed to the test instead of a single input. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'static Stream<Arguments> inputProvider() {\n         return Stream.of(Arguments.of("5", "3"), Arguments.of("-1", "40"));\n    }\n')),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Import")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You need to import the ",(0,i.kt)("inlineCode",{parentName:"p"},"Arguments")," class in your test class like so:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-java"},"import org.junit.jupiter.params.provider.Arguments;\n")))),(0,i.kt)("p",null,"The parameterized tests will then look like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'    @ParameterizedTest\n    @MethodSource("inputProvider")\n    void testWithInput(String num1, String num2) throws InvalidClauseException {\n        runWithInput(num1 + System.lineSeparator() + num2); //This will run main with input and set the output\n        //...assert statements (like any other test)\n        // For the first case, num1 will be "5" and num2 will be "3", and so on.\n')),(0,i.kt)("p",null,"For a full example of an input test look at ",(0,i.kt)("a",{parentName:"p",href:"../full-example#sample-input-test"},"Full Examples"),"."))}d.isMDXComponent=!0}}]);