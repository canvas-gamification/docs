"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1414],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return c}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),d=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=d(n),c=r,k=p["".concat(u,".").concat(c)]||p[c]||m[c]||l;return n?a.createElement(k,o(o({ref:t},s),{},{components:n})):a.createElement(k,o({ref:t},s))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=p;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var d=2;d<l;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5593:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return u},metadata:function(){return d},toc:function(){return s},default:function(){return p}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),o=["components"],i={},u="Random Clauses",d={unversionedId:"junit-framework/clauses/random-clause-documentation",id:"junit-framework/clauses/random-clause-documentation",title:"Random Clauses",description:"Random clauses check if a set of outputs is uniformly distributed and can be used both in and out of Test Sentences.",source:"@site/docs/junit-framework/clauses/random-clause-documentation.md",sourceDirName:"junit-framework/clauses",slug:"/junit-framework/clauses/random-clause-documentation",permalink:"/docs/docs/junit-framework/clauses/random-clause-documentation",editUrl:"https://github.com/canvas-gamification/docs/docs/junit-framework/clauses/random-clause-documentation.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Retrieving Values",permalink:"/docs/docs/junit-framework/clauses/retrieving-values"},next:{title:"Retrieving Values",permalink:"/docs/docs/junit-framework/retrieving-values"}},s=[{value:"Random Clauses in Test Sentences",id:"random-clauses-in-test-sentences",children:[],level:2},{value:"Random Clauses Outside Test Sentences",id:"random-clauses-outside-test-sentences",children:[],level:2},{value:"Random Clauses",id:"random-clauses-1",children:[{value:"<code>RandomInteger</code>",id:"randominteger",children:[],level:3},{value:"<code>RandomChar</code>",id:"randomchar",children:[],level:3},{value:"<code>RandomDouble</code>",id:"randomdouble",children:[],level:3},{value:"<code>RandomBoolean</code>",id:"randomboolean",children:[],level:3}],level:2}],m={toc:s};function p(e){var t=e.components,n=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"random-clauses"},"Random Clauses"),(0,l.kt)("p",null,"Random clauses check if a set of outputs is uniformly distributed and can be used both in and out of Test Sentences."),(0,l.kt)("h2",{id:"random-clauses-in-test-sentences"},"Random Clauses in Test Sentences"),(0,l.kt)("p",null,"Random clauses can be used in a test sentence with any other combination of clauses. In this use case, the clause\ncaptures a print value based on the type of clause (int, char, etc.) and checks if the values are uniformly\ndistributed (implying random generation of numbers). Typically, each clause has parameters to describe what values it\nshould capture, and then checks for a uniform distribution across the set of values it captures from the console output."),(0,l.kt)("h2",{id:"random-clauses-outside-test-sentences"},"Random Clauses Outside Test Sentences"),(0,l.kt)("p",null,"Random clauses can be used to check the randomness of a set of input values from anywhere in a test. This is done by\ndeclaring the random clause as you normally would with the desired bounds, but then calling\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"validateRandom(ArrayList)")," method on the clause. This method receives an ",(0,l.kt)("inlineCode",{parentName:"p"},"ArrayList")," of values of the same type as\nthe clause, and executes the random check on this set of values. Note that to use this, the test writer must generate\nthis ",(0,l.kt)("inlineCode",{parentName:"p"},"ArrayList"),", and it must have ",(0,l.kt)("strong",{parentName:"p"},"at least")," 1000 values to ensure the check is accurate."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"        ArrayList<Integer> randomValues = new ArrayList();\n        // Add random values to arrayList to test\n        RandomInteger randomInteger = new RandomInteger(0, 100) // Checking for values in range from 0 to 100\n        randomInteger.validateRandom(randomValues);\n")),(0,l.kt)("h2",{id:"random-clauses-1"},"Random Clauses"),(0,l.kt)("h3",{id:"randominteger"},(0,l.kt)("inlineCode",{parentName:"h3"},"RandomInteger")),(0,l.kt)("p",null,"This clause is used in instances where an integer's value is determined randomly. Used with ",(0,l.kt)("inlineCode",{parentName:"p"},"BaseRandomTest"),", the\nrandomness of this value and its range will be automatically tested."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Constructor:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public RandomInteger(int lower, int upper, [String name]) {\n    ...\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"lower")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")),(0,l.kt)("td",{parentName:"tr",align:null},"The lower bound (inclusive) of values that this random integer can equal")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"upper")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")),(0,l.kt)("td",{parentName:"tr",align:null},"The upper bound (exclusive) of values that this random integer can equal")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"name")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"Name that can be used to retrieve the value during testing")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public Clause[] testSentence() {\n    return new Clause[]{\n        new RandomInteger(1, 5),  // a random integer that could equal 1, 2, 3, or 4\n        new RandomInteger(25, 75, "random integer")  // another example using the name parameter\n    };\n}\n')),(0,l.kt)("h3",{id:"randomchar"},(0,l.kt)("inlineCode",{parentName:"h3"},"RandomChar")),(0,l.kt)("p",null,"This clause is used in instances where a character's value is determined randomly. Used with ",(0,l.kt)("inlineCode",{parentName:"p"},"BaseRandomTest"),", the\nrandomness of this value and its range will be automatically tested."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Constructor:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public RandomChar(char lower, char upper, [String name], [boolean inclusiveUpper]) {\n    ...\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"lower")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"char")),(0,l.kt)("td",{parentName:"tr",align:null},"The lower bound (inclusive) of values that this random character can equal")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"upper")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"char")),(0,l.kt)("td",{parentName:"tr",align:null},"The  upper (exclusive) of values that this random character can equal")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"name")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"Name that can be used to retrieve the value during testing")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"inclusiveUpper")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies if the upper bound should be included in the values this random character can equal")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public Clause[] testSentence() {\n    return new Clause[]{\n        new RandomChar('a', 'z'),  // a random character that could equal anything between 'a'(inclusive) and 'z'(exclusive)\n        new RandomChar('A', 'Z', \"random char\")  // another example using the name parameter\n    };\n}\n")),(0,l.kt)("h3",{id:"randomdouble"},(0,l.kt)("inlineCode",{parentName:"h3"},"RandomDouble")),(0,l.kt)("p",null,"This clause is used in instances where a double/float's value is determined randomly. Used with ",(0,l.kt)("inlineCode",{parentName:"p"},"BaseRandomTest"),", the\nrandomness of this value and its range will be automatically tested."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Constructor:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public RandomDouble(double lower, double upper, [int precision], [String name]) {\n    ...\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"lower")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"double")),(0,l.kt)("td",{parentName:"tr",align:null},"The lower bound (inclusive) of values that this random double can equal")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"upper")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"double")),(0,l.kt)("td",{parentName:"tr",align:null},"The upper bound (exclusive) of values that this random double can equal")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"precision")," (optional) ","[WORK-IN-PROGRESS]"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"int")),(0,l.kt)("td",{parentName:"tr",align:null},"The number of decimal places that this random double should have")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"name")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"Name that can be used to retrieve the value during testing")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public Clause[] testSentence() {\n    return new Clause[]{\n        new RandomDouble(11.9, 23.6),  // a random double that could equal anything between 11.9(inclusive) and 23.6(exclusive)\n        new RandomDouble(25, 899.9, "random double")  // another example using the name parameter\n    };\n}\n')),(0,l.kt)("h3",{id:"randomboolean"},(0,l.kt)("inlineCode",{parentName:"h3"},"RandomBoolean")),(0,l.kt)("p",null,"This clause is used in instances where a binary value (true/false, 'O'/'X', 0/1, etc.) is determined randomly. Used\nwith ",(0,l.kt)("inlineCode",{parentName:"p"},"BaseRandomTest"),", this checks if both items appear equally."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Constructor:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"public RandomBoolean([String output1], [String output2], [String name]) {\n    ...\n}\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Parameters:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"output1")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"The first binary value which the output may equal. This defaults to true if not specified.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"output2")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"The second binary value which the output may equal. This defaults to false if not specified.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"name")," (optional)"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"String")),(0,l.kt)("td",{parentName:"tr",align:null},"Name that can be used to retrieve the value during testing")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Usage:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public Clause[] testSentence() {\n    return new Clause[]{\n        new RandomBoolean(),  // a random boolean that equals either true or false\n        new RandomDouble("O", "X")  // a random boolean that equals either "O" or "X"\n    };\n}\n')))}p.isMDXComponent=!0}}]);