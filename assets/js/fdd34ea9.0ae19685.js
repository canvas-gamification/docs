"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[550],{3905:function(t,e,n){n.d(e,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var p=r.createContext({}),l=function(t){var e=r.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},u=function(t){var e=l(t.components);return r.createElement(p.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},c=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,p=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),c=l(n),m=a,h=c["".concat(p,".").concat(m)]||c[m]||d[m]||i;return n?r.createElement(h,o(o({ref:e},u),{},{components:n})):r.createElement(h,o({ref:e},u))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var p in e)hasOwnProperty.call(e,p)&&(s[p]=e[p]);s.originalType=t,s.mdxType="string"==typeof t?t:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1541:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return u},default:function(){return c}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:2},p="Test Options",l={unversionedId:"junit-framework/input-tests/test-option",id:"junit-framework/input-tests/test-option",title:"Test Options",description:"This is a class that is used to designate tests so that they run with inputs.",source:"@site/docs/junit-framework/input-tests/test-option.md",sourceDirName:"junit-framework/input-tests",slug:"/junit-framework/input-tests/test-option",permalink:"/docs/docs/junit-framework/input-tests/test-option",editUrl:"https://github.com/canvas-gamification/docs/docs/junit-framework/input-tests/test-option.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/docs/docs/junit-framework/input-tests/overview"},next:{title:"Parameterized Testing",permalink:"/docs/docs/junit-framework/input-tests/parameterized-testing"}},u=[{value:"The <code>TestOption</code> class",id:"the-testoption-class",children:[{value:"Parameters",id:"parameters",children:[],level:3},{value:"Usage",id:"usage",children:[],level:3}],level:2}],d={toc:u};function c(t){var e=t.components,n=(0,a.Z)(t,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"test-options"},"Test Options"),(0,i.kt)("p",null,"This is a class that is used to designate tests so that they run with inputs."),(0,i.kt)("h2",{id:"the-testoption-class"},"The ",(0,i.kt)("inlineCode",{parentName:"h2"},"TestOption")," class"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"TestOption")," has two options that are needed for denoting input tests, namely: ",(0,i.kt)("inlineCode",{parentName:"p"},"isInputTest")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultInput.")),(0,i.kt)("h3",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"isInputTest")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"boolean")),(0,i.kt)("td",{parentName:"tr",align:null},"When set to ",(0,i.kt)("inlineCode",{parentName:"td"},"true")," the tests will run for inputs")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"defaultInput")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null},"default input for the program to run with")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"incorrectStructureErrorMessage")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"String")),(0,i.kt)("td",{parentName:"tr",align:null},"message to print when the user output doesn't match the test sentence")))),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"For an input test to be configured properly, both ",(0,i.kt)("inlineCode",{parentName:"p"},"isInputTest")," ",(0,i.kt)("strong",{parentName:"p"},"and")," ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultInput")," must be defined!"))),(0,i.kt)("h3",{id:"usage"},"Usage"),(0,i.kt)("p",null,"If we were writing a test that needed input it would look something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'public class Example extends BaseTest {\n    public Clause[] testSentence() {\n        TestOption.isInputTest = true;\n        TestOption.defaultInput = "something";\n\n        return new Clause[]{\n                new StringLiteral("...")\n                //...test sentence definition\n        };\n    }\n    //...other test methods\n')),(0,i.kt)("p",null,"In the example above, this test class is an input test class that will run with a default input of ",(0,i.kt)("inlineCode",{parentName:"p"},'"something"')," passed to the program."),(0,i.kt)("p",null,"To change the error message that is printed when the user output doesn't match the test sentence, you can change the option inside each test like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@ParameterizedTest\n@MethodSource("inputProvider")\nvoid runsCorrectlyWithInput(int input) throws InvalidClauseException {\n    TestOption.incorrectStructureErrorMessage = "Your program did not correctly run with input";\n    //...test code/assert statements\n}\n')))}c.isMDXComponent=!0}}]);